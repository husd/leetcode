package com.husd.leetcode.bit;

/**
 * 190. 颠倒二进制位
 * <p>
 * 颠倒给定的 32 位无符号整数的二进制位。
 * <p>
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 *  
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *  
 * <p>
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/reverse-bits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author hushengdong
 */
public class ReverseBits {

    // you need treat n as an unsigned value

    //思路1 逐个来
    // 1001001010 需要交换的话，先把最右边的算出来，挨个加上去
    // 这个思路和反转1个10进制的数字，有点类似
    public int reverseBits1(int n) {

        int res = 0;
        for (int i = 0; i < 32; i++) {
            int r = n & 1;
            int n_res = res << 1;
            res = n_res + r;
            n = n >> 1;
        }
        return res;
    }

    //异或 利用了 n = n ^ 0
    // 一共32位，从0-31 如果第i位是0 ，那么第 31-i就是0 0的话，就不用变，因为初始值res = 0，所以直接 res = res ^ 0
    // 如果第i位是1 那么第31-i位就是1 因为初始值是res = 0 ，所以需要 res = res ^ (1 << (31 - i)) 就把第31-i修改为1了
    public int reverseBits(int n) {

        //这个算法不正确，有待修改
        int res = 0;
        for (int i = 0; i < 32; i++) {
            res ^= (n & (1 << i)) == 0 ? 0 : 1 << (31 - i);
        }
        return res;
    }

    //思路就是 分治
    public int reverseBits3(int n) {
        n = (n >>> 16) | (n << 16);
        n = ((n & 0xff00ff00) >>> 8) | ((n & 0x00ff00ff) << 8);
        n = ((n & 0xf0f0f0f0) >>> 4) | ((n & 0x0f0f0f0f) << 4);
        n = ((n & 0xcccccccc) >>> 2) | ((n & 0x33333333) << 2);
        n = ((n & 0xaaaaaaaa) >>> 1) | ((n & 0x55555555) << 1);
        return n;
    }

}
